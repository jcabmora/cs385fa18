
*******************************************
Lab No. 5: Horizontal Scalability and State
*******************************************

In this lab we are going to evaluate the implications for scalabitly when applications store data locally. 


Part 1: Setup a Kubernetes Cluster
==================================

#. Provision a Kubernetes cluster by following the steps from :ref:`Part 1 of Lab No. 3.<lab03-part1>`. Name the virtual machine  **lab05** and name your Kubernetes Cluster **lab05cluster**
   Make sure that you test the kubernetes cluster by deploying a test pod. (Any image is fine, as long as it lets you  confirm that the Kubernetes cluster is running.

#. On lab05 install ``make``:

    .. parsed-literal::
        > sudo apt-get install make

Part 2: Authorization APIs
==========================

For this part of the lab, you will download an updated version of minibank that implements two different authentication schemas: cookie-based and token-based.


#. Download the updated minibank source from https://github.com/jcabmora/minibank/tree/week6

#. Build and run the images locally on ``lab05``:

    .. parsed-literal::
        > make run-images

#. Verify that there are two docker images running,  ``minibank`` and ``mysql``.

#. Test that the service works by registering a user:

    .. parsed-literal:: 
        > curl localhost/api/account/register -d '{"username": "john", "password": "john123456"}'
        Successfully registered account


The new version of minibank exposes two new REST API endpoints:

* **/api/account/login**: authenticates username/password credentials. If the authentication succeeds, generates session data internally and returns an empty ``200`` response with a ``sessionid`` cookie. For example:

    .. parsed-literal:: 
        > curl -c cookies.txt localhost/api/account/login -d '{"username": "john", "password": "john123456"}'

    When the previous command executes, it should store cookie information in a file called ``cookies.txt``. Once you open that file you should be able to confirm that a cookie was received.

    .. parsed-literal::
        > cat cookies.txt
        # Netscape HTTP Cookie File
        # https://curl.haxx.se/docs/http-cookies.html
        # This file was generated by libcurl! Edit at your own risk.

        localhost       FALSE   /api/account/   FALSE   0       sessionid       9de2b793-c6aa-44f4-8e06-9b8525cacbd1


* **/api/account/token**:  also authenticates username/password credentials. If the authentication succeeds, then it returns a JSON payload that contains a JSON Web Token that can be used for token authorization.

    .. parsed-literal::
        > curl -X POST localhost/api/account/token -d '{"username": "john", "password": "john123456"}'
        {"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1Mzg4NDM2NzMsInVzZXJuYW1lIjoicmFtb24ifQ.QUQjgByqzclFM-GQ_tqvQogiwIVLUpI-Iu6SjLCRAMw"}


* **/api/account/sessions**: returns a list of the sessions that are associated with an authenticated user. Users need to provide either cookie or token proof of authentication. For example, to execute this using cookies: 

    .. parsed-literal::
        > curl -b cookies.txt localhost/api/account/sessions
        {"sessions":["9bf4a24c-71bc-42de-8432-68bfbdd941d9","9de2b793-c6aa-44f4-8e06-9b8525cacbd1"]}

    Or if you prefer to use a token:

    .. parsed-literal::
        > curl  -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1Mzg4NDM2NzMsInVzZXJuYW1lIjoicmFtb24ifQ.QUQjgByqzclFM-GQ_tqvQogiwIVLUpI-Iu6SjLCRAMw" localhost/api/account/sessions



Part 3: Deploy to Kubernetes
============================

#. We first need to push the images to the Google Container Registry.

    .. parsed-literal::
        > make push-images

#. Open the ``kubernetes/mysql.yaml`` file on a text editor and replace <YOUR_PROJECT_ID> with your google cloud project id.


#. Deploy the service:

    .. parsed-literal::
        > kubectl create -f kubernetes/mysql.yaml


#. Verify that the deployment is running

#. You can test that your mysql instance is running by executing this command:

    .. parsed-literal::
        > kubectl run -it --rm --image=mysql:5.6 --restart=Never mysql-client -- mysql -h mysql -uminibank -pminibank                                                                                   
        If you don't see a command prompt, try pressing enter.
        mysql> exit

#. Open the ``kubernetes/minibank.yaml`` file on a text editor and replace <YOUR_PROJECT_ID> with your google cloud project id.

#. Deploy minibank:

    .. parsed-literal::
        > kubectl create -f kubernetes/minibank.yaml

#. Verify that both minibank and mysql pods are running

#. Create the minibank service:

    .. parsed-literal::
        > kubectl expose deployment minibank --port 8080 --type LoadBalancer

#. Wait until an External IP address is assigned to the minibank service.

#. If there is a ``cookies.txt`` file in your current working directory, remove it.

#.  Once you have an External IP address assigned to the minibank service, test the service:

    .. parsed-literal::
        > curl http://<MINIBANK_SERVICE_IP_ADDRESS>:8080/api/account/register -d '{"username": "john", "password": "john123456"}'

#. Test the ``/api/account/login`` endpoint:
   
    .. parsed-literal::
        > curl -c cookies.txt http://<MINIBANK_SERVICE_IP_ADDRESS>:8080/api/account/login -d '{"username": "john", "password": "john123456"}'

#. Test the ``/api/account/sessions`` endpoint (confirm taht the session in the response matches the ``sessionid`` stored in ``cookies.txt``
   
    .. parsed-literal::
        >  curl -b cookies.txt http://<MINIBANK_SERVICE_IP_ADDRESS>:8080/api/account/sessions
        {"sessions":["04ba9908-604b-4ff6-a5c0-12a547afe3fb"]}

#. Test the authentication with ``/api/account/token`` and use the obtained token to test ``/api/account/sessions`` 

Part 4: Scale
=============

#. Scale the minibank service to 5 replicas, and wait until all pods are runninig.

#. Make 5 more calls to the ``/api/account/sessions`` API using cookie base authorization. What do you observe?

#. Make 5 more call to the ``/api/account/sessions`` API using the token that was obtained earlier. What do you observe?


.. admonition:: What to turn in
    :class: worksheet

    #. Answer to both questions from part 4, and provide an explanation for the observed behavior.

    #. Which one of the authentication methods proves to be more scalable.  What modifications can be done to the authentication method that is less scalable (or not scalable at all) in order to improve its scalability.
